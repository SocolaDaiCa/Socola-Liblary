<?php

/**
 * @Author: Socola
 * @Email: TokenTien@gmail.com
 * @Date:   2018-02-13 20:08:41
 * @Last Modified by:   Socola
 * @Last Modified time: 2018-03-13 09:53:59
 */
namespace Socola\Facebook;

use Socola\Curl;
use Socola\Facebook\Tool;
trait Graph
{
	/**
	 * []
	 * @param  [String] $clientID [description]
	 * @return [type]           [description]
	 */
	public function getAccessTokenInfo($clientID)
	{
		$endpoint = "https://graph.facebook.com/oauth/access_token_info?client_id={$clientID}&access_token={$this->accessToken}";
	}
	/**
	 * [getPermissions description]
	 * @return [type] [description]
	 */
	public function getPermissions()
	{
		$endpoint = "https://graph.facebook.com/me/permissions?access_token={$this->accessToken}";
		return Curl::getJSON($endpoint);
	}
	/**
	 * [getAvatar description]
	 * @param  [type] $userID [description]
	 * @return [type]         [description]
	 */
	public static function getAvatar($userID)
	{
		return "https://graph.facebook.com/{$userID}/picture?type=large&redirect=true&width=40&height=40";
	}
	/**
	 * [ripAccessToken description]
	 * @param  [type] $accessToken [description]
	 * @return [type]              [description]
	 */
	public static function ripAccessToken($accessToken)
	{
		$endpoint = "https://api.facebook.com/restserver.php?method=auth.expireSession&access_token={$this->accessToken}";
		return Curl::get($endpoint);
	}
	/**
	 * [unfollow description]
	 * @param  [type] $userID [description]
	 * @return [type]         [description]
	 */
	public function unfollow($userID)
	{
		$endpoint = "https://graph.facebook.com/{$userID}/subscribers?method=delete&access_token={$this->accessToken}";
		return Curl::getJSON($endpoint);
	}
	/**
	 * [getFriends description]
	 * @param  string $fields [description]
	 * @return [type]         [description]
	 */
	public function getFriends($fields = 'id,gender')
	{
		$endPoint = "https://graph.facebook.com/me/friends?limit=5000&fields={$fields}&access_token={$this->accessToken}";
		return Curl::getJSON($endPoint);
	}
	/**
	 * [unFriend description]
	 * @param  [type] $targeID [description]
	 * @return [type]          [description]
	 */
	public function unFriend($targeID)
	{
		$endPoint = "https://graph.facebook.com/me/friends?uid={$targeID}&method=delete&access_token={$this->accessToken}";
		return Curl::getJSON($endPoint);
	}
	/**
	 * [block description]
	 * @param  [type] $userID [description]
	 * @return [type]         [description]
	 */
	public function block($userID)
	{
		$endPoint = "Block User https://graph.facebook.com/v2.8/me/blocked?uid={$userID}&method=post&access_token={$this->accessToken}";
		return Curl::getJSON($endPoint);
	}
	/**
	 * [getBlocks description]
	 * @return [type] [description]
	 */
	public function getBlocks()
	{
		$endPoint = "https://graph.facebook.com/v2.8/me/blocked?access_token={$this->accessToken}";
		return Curl::getJSON($endPoint);
	}
	/**
	 * [sendMessage description]
	 * @param  [type] $userID  [description]
	 * @param  [type] $message [description]
	 * @return [type]          [description]
	 */
	public function sendMessage($userID, $message)
	{
		$endPoint = "https://graph.facebook.com/t_{$userID}?method=post&message={$message}&access_token={$this->accessToken}";
		return Curl::getJSON($endPoint);
	}
	/* Post */
	public function getComments($postID)
	{
		// return $this->graph($pos)
	}
	public function post($targetID, $message)
	{
		$endpoint = "https://graph.facebook.com/{targetID}/feed?method=post&message={$message}&access_token={$this->accessToken}";
		return Curl::getJSON($endpoint);
	}
	public function postImage($targetID, $message, $imageURL)
	{
		$endPoint = "https://graph.facebook.com/{$targetID}/photos?method=post&url={$imageURL}&message={$message}&access_token={$this->accessToken}";
	}
	public function deletePost($postID)
	{
		$endPoint = "https://graph.facebook.com/{$postID}?method=delete&access_token={$this->accessToken}";
		return Curl::getJSON($endPoint);
	}
	public function comment($postID, $message)
	{
		$endPoint = "https://graph.facebook.com/{$postID}/comments?method=post&message={$message}&access_token={$this->accessToken}";
		return Curl::getJSON($endPoint);
	}
	public function reaction($postID, $type)
	{
		$types = ['LIKE', 'LOVE', 'WOW', 'HAHA', 'SAD', 'ANGRY'];
		if(!in_array($type, $types)){
			return false;
		}
		$endPoint = "https://graph.facebook.com/{$postID}/reactions?type={type}&method=post&access_token={$this->accessToken}";
		return Curl::getJSON($endPoint);
	}
	/* Group */
	public function deleteMember($groupID, $userID)
	{
		$endPoint = "https://graph.facebook.com/{$groupID}/members?method=delete&member={$userID}&access_token={$this->accessToken}";
		return Curl::getJSON($endPoint);
	}
	public function addMember($groupID, $userID)
	{
		$endPoint = "https://graph.facebook.com/{$groupID}/members?method=post&member={$userID}&access_token={$this->accessToken}";
		return Curl::getJSON($endPoint);
	}
	/* page */
	public function getPageAccessTokens()
	{
		$endpoint = "https://graph.facebook.com/me/accounts?access_token={$this->accessToken}";
		return Curl::getJSON($endpoint);
	}
	public function unLikePage($pageID)
	{
		$endPoint = "https://graph.facebook.com/{$pageID}/likes?method=delete&access_token={$this->accessToken}";
		return Curl::getJSON($endPoint);
	}

}
// public function isDefaultAvatar($userID)
	// {
	// 	$endpoint = "Check avatar defalt https://graph.facebook.com/<USER_ID>/picture?redirect=false s_silhouette == TRUE thì đó là avatar mặc định Kiểm tra";
	// 	return Curl::getJSON($endpoint);
	// }
?>

